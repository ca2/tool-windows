#!/bin/sh

if [ -z "$1" ]; then

        if [ -d .git ]; then

		BASEDIR=$(pwd)

		DIR=$(sed -e 's/^[[:space:]]*//' -e 's/[[:space:]\\/]*$//'<<<"${DIR}")
		
        else

                if [ -f $HOME/current_working_directory.txt ]; then

		        BASEDIR=`cat $HOME/current_working_directory.txt`

		        BASEDIR=$(sed -e 's/^[[:space:]]*//' -e 's/[[:space:]\\/]*$//'<<<"${BASEDIR}")

		        BASEDIR=$(sed -e 's/^\([A-Z]\)[:]/\/\1/'<<<"${BASEDIR}")

		        BASEDIR=$(sed -e 's/\\/\//'<<<"${BASEDIR}")

                fi

		if [ -z "$BASEDIR" ]; then

		        echo "Please run command:"
                        echo ""
		        echo "   set_working_directory <WORKING_DIRECTORY_PATH>"
                        echo ""
		        echo "to set the base folder path."
		        echo ""
		        echo "You can also run this command from a git repository folder."

                        exit 0

                fi

	fi

else

	BASEDIR=$1

fi

path_pattern="path = *"

pushd () {
    command pushd "$@" > /dev/null
}

popd () {
    command popd "$@" > /dev/null
}


submodule()
{

        if [ -d "$1" ]; then

                pushd $1
				
				DIR_NAME=$(basename $1)
				
				CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
				
				CURRENT_BRANCH=$(sed -e 's/^[[:space:]]*//' -e 's/[[:space:]\\/]*$//'<<<"${CURRENT_BRANCH}")

                DIR=$(pwd)

                DIR=$(sed -e 's/^[[:space:]]*//' -e 's/[[:space:]\\/]*$//'<<<"${DIR}")

                echo "Processing $DIR..."

                git fetch
				
				PARENT_BRANCH_HINT=""
				
				if [ -f ../parent_branch_hint_for_$DIR_NAME ]; then
				
					PARENT_BRANCH_HINT=$(cat ../parent_branch_hint_for_$DIR_NAME)

				fi
					
				if [ -n "$PARENT_BRANCH_HINT" ]; then
				
					#if [[ "$CURRENT_BRANCH" != "$PARENT_BRANCH_HINT" ]]; then

						echo "Checking out \"$PARENT_BRANCH_HINT\" branch..."
						
						git checkout -B $PARENT_BRANCH_HINT heads/$PARENT_BRANCH_HINT
						
					#else
					
					#	echo "At \"$CURRENT_BRANCH\"..."
						
					#fi
						
				else

					LIST_MAIN_BRANCH=$(git branch --list main)

					if [ -n "$LIST_MAIN_BRANCH" ]; then
					
						#if [[ "$CURRENT_BRANCH" != "main" ]]; then
				
							echo "Checking out \"main\" branch..."

							git checkout -B main heads/main
							
						#else
						
						#	echo "At \"main\"..."
							
						#fi

					else

						LIST_MASTER_BRANCH=$(git branch --list master)
					
						if [ -n "$LIST_MASTER_BRANCH" ]; then
						
							#if [[ "$CURRENT_BRANCH" != "master" ]]; then

								echo "Checking out \"master\" branch..."
						
								git checkout -B master heads/master
								
							#else
							
							#	echo "At \"master\"..."
								
							#fi
						
						fi
						
					fi

                fi

                git pull

                if [ -n "$LIST_MAIN_BRANCH" ]; then

                        if [ -f .gitmodules ]; then

                                while read line; do

                                        trimmed_line=$(sed -e 's/^[[:space:]]*//' -e 's/[[:space:]\\/]*$//'<<<"${line}")

                                        if [[ $trimmed_line == $path_pattern ]]; then

                                                submodule_name=$(sed -e 's/^path\s*=\s*//'<<<"${line}")

                                                submodule ./$submodule_name

                                        fi

                                done < ./.gitmodules

                        fi

                fi

                popd

        fi

}


submodule $BASEDIR

# localtime="$(date +"%Y-%m-%d %H:%M:%S %:z") ($(timedatectl show -p Timezone --value))"
localtime="$(date +"%Y-%m-%d %H:%M:%S")"
 
echo "checkout $localtime"



